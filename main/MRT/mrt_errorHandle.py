# *************************************************************************************************************
#
#    mrt_errorHandle - Source for modifying the default or current exception handling
#                      in GUI mode for Maya for MRT.
#
#    Can be modified or copied for your own purpose.
#
#    Written by Himanish Bhattacharya 
#
# *************************************************************************************************************

__moduleName__ = 'mrt_errorHandle'

import maya.utils as utils
import maya.cmds as cmds
import traceback, platform

_mrt_version = 1.22


def printTopExceptionForDebug(error_stack_frames):
    '''
    Prints top-down unhandled exception info generated by MRT. To be used for debugging.
    '''
    # Collect maya/os info.
    debugInfoTxt = '\n\n{0} MRT ERROR/EXCEPTION OCCURRED {0}'.format('*'*40)
    debugInfoTxt += '\n%s(Please use the text below for sending error messages)\n' % ('\t'*7)
    debugInfoTxt += '\nMRT VERSION:     %s' % _mrt_version
    debugInfoTxt += '\nMAYA VERSION:    %sx%s' % (cmds.about(version=True), 64 if cmds.about(is64=True) else 32)
    debugInfoTxt += '\nOS:              %s' % cmds.about(os=True)
    debugInfoTxt += '\nPY VERSION:      %s' % platform.python_version()
    debugInfoTxt += '\n\nEXCEPTION DATA (SOURCE TOP DOWN):-\n'
    
    # Collect info for each error stack trace, from top down.
    for e_frame in error_stack_frames[-1::-1]:
        
        e_frame_info = traceback.extract_stack(e_frame, 1)[0]

        debugInfoTxt += '\nSOURCE: %s\nLINE: %s\nFRAME: "%s"\nAT: "%s"\nLOCALS:' % (e_frame_info[0], e_frame_info[1], e_frame_info[2], e_frame_info[3])
        
        local_items = e_frame.f_locals.items()
        
        if local_items:
            for key, value in local_items:
                debugInfoTxt += '\n%30s = %s' % (key, value)
        else:
            debugInfoTxt += 'None'
            
        debugInfoTxt += '\n'
        
    return debugInfoTxt


def getTopExceptionForDebug(excType, excValue, tb_info, detail=2):
    '''
    Top exception handler to be called for MRT in case of error.
    '''
    # Get the traceback object.
    tb_stack = tb_info
    
    # To store stack traces generated by MRT.
    mrt_stacks = []
    
    # Iterate through each error stack frame and check if the source belongs to MRT.
    while tb_stack:
        
        stack_f_globals = tb_stack.tb_frame.f_globals
        
        if '__moduleName__' in stack_f_globals:     # Each MRT source file (module) has the attribute __moduleName__
            
            moduleName = stack_f_globals['__moduleName__']      # Get its value and check if it matches.
            
            if moduleName.startswith('mrt_'):
                mrt_stacks.append(tb_stack.tb_frame)
                
        tb_stack = tb_stack.tb_next
    
    return printTopExceptionForDebug(mrt_stacks) if mrt_stacks else ORIG_EXC_HOOK(excType, excValue, tb_info, detail=2)


# After declaring the mrt exception handler, store the original exception handler in maya gui mode and replace it
ORIG_EXC_HOOK = utils.formatGuiException
utils.formatGuiException = getTopExceptionForDebug    # Declared in this module.
